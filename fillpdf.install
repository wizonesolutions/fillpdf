<?php
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\fillpdf\Service\FillPdfAdminFormHelper;

/**
 * Add scheme field to FillPdfForm.
 */
function fillpdf_update_8101() {
  $edum = \Drupal::entityDefinitionUpdateManager();
  $scheme_field = BaseFieldDefinition::create('string')
    ->setLabel('Storage system for generated PDFs')
    ->setDescription(t('This setting is used as the storage/download method for generated PDFs. The use of public files is more efficient, but does not provide any access control. Changing this setting will require you to migrate associated files and data yourself and is not recommended after you have uploaded a template.'))
    ->setDisplayOptions('form', [
      'type' => 'radios',
      'options' => FillPdfAdminFormHelper::schemeOptions(),
    ]);
  $edum->installFieldStorageDefinition('scheme', 'fillpdf_form', 'fillpdf_form', $scheme_field);
}

/**
 * Install FillPdfFileContext storage.
 */
function fillpdf_update_8102() {
  $edum = \Drupal::entityDefinitionUpdateManager();
  $entity_manager = \Drupal::entityManager();
  $fillpdf_file_context = $entity_manager->getDefinition('fillpdf_file_context');
  $edum->installEntityType($fillpdf_file_context);
}

/**
 * Use file fields instead of entity_reference fields for referring to files.
 */
function fillpdf_update_8103() {
  $edum = \Drupal::entityDefinitionUpdateManager();
  $em = \Drupal::entityManager();
  $db = \Drupal::database();

  $form_file_def = BaseFieldDefinition::create('file')
    ->setLabel(t('The associated managed file.'))
    ->setDescription(t('The associated managed file.'))
    ->setName('file')
    ->setProvider('fillpdf_form')
    ->setTargetBundle(NULL)
    ->setTargetEntityTypeId('fillpdf_form');

  $fc_file_def = BaseFieldDefinition::create('file')
    ->setLabel(t('The associated managed file.'))
    ->setDescription(t('The associated managed file.'))
    ->setName('file')
    ->setProvider('fillpdf_file_context')
    ->setTargetBundle(NULL)
    ->setTargetEntityTypeId('fillpdf_file_context');

  // Save existing data.
  $form_files = $db->select('fillpdf_forms', 'ff')
    ->fields('ff', ['fid', 'file'])
    ->execute()
    ->fetchAllKeyed();

  $fc_files = $db->select('fillpdf_file_context', 'fc')
    ->fields('fc', ['id', 'file'])
    ->execute()
    ->fetchAllKeyed();

  // Remove data from the storage.
  $db->update('fillpdf_forms')
    ->fields(['file' => NULL])
    ->execute();

  $db->update('fillpdf_file_context')
    ->fields(['file' => NULL])
    ->execute();

  // Now install the new field definitions.
  $edum->updateFieldStorageDefinition($form_file_def);
  $edum->updateFieldStorageDefinition($fc_file_def);

  foreach ($form_files as $entity_id => $fillpdf_form_file) {
    /** @var ContentEntityInterface $entity */
    $entity = $em->getStorage('fillpdf_form')->load($entity_id);
    $entity->file->target_id = $fillpdf_form_file;
    $entity->save();
  }

  foreach ($fc_files as $entity_id => $ffcf) {
    /** @var ContentEntityInterface $entity */
    $entity = $em->getStorage('fillpdf_file_context')->load($entity_id);
    $entity->file->target_id = $ffcf;
    $entity->save();
  }
}
